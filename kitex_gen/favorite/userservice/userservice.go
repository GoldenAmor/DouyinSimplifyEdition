// Code generated by Kitex v0.3.2. DO NOT EDIT.

package userservice

import (
	"context"
	"dousheng/kitex_gen/favorite"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*favorite.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"IsFavorite":           kitex.NewMethodInfo(isFavoriteHandler, newUserServiceIsFavoriteArgs, newUserServiceIsFavoriteResult, false),
		"Like":                 kitex.NewMethodInfo(likeHandler, newUserServiceLikeArgs, newUserServiceLikeResult, false),
		"UnLike":               kitex.NewMethodInfo(unLikeHandler, newUserServiceUnLikeArgs, newUserServiceUnLikeResult, false),
		"GetFavoritesByUserId": kitex.NewMethodInfo(getFavoritesByUserIdHandler, newUserServiceGetFavoritesByUserIdArgs, newUserServiceGetFavoritesByUserIdResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "favorite",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func isFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.UserServiceIsFavoriteArgs)
	realResult := result.(*favorite.UserServiceIsFavoriteResult)
	success, err := handler.(favorite.UserService).IsFavorite(ctx, realArg.IsFavoriteReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceIsFavoriteArgs() interface{} {
	return favorite.NewUserServiceIsFavoriteArgs()
}

func newUserServiceIsFavoriteResult() interface{} {
	return favorite.NewUserServiceIsFavoriteResult()
}

func likeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.UserServiceLikeArgs)
	realResult := result.(*favorite.UserServiceLikeResult)
	success, err := handler.(favorite.UserService).Like(ctx, realArg.LikeReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLikeArgs() interface{} {
	return favorite.NewUserServiceLikeArgs()
}

func newUserServiceLikeResult() interface{} {
	return favorite.NewUserServiceLikeResult()
}

func unLikeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.UserServiceUnLikeArgs)
	realResult := result.(*favorite.UserServiceUnLikeResult)
	success, err := handler.(favorite.UserService).UnLike(ctx, realArg.UnLikeReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUnLikeArgs() interface{} {
	return favorite.NewUserServiceUnLikeArgs()
}

func newUserServiceUnLikeResult() interface{} {
	return favorite.NewUserServiceUnLikeResult()
}

func getFavoritesByUserIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.UserServiceGetFavoritesByUserIdArgs)
	realResult := result.(*favorite.UserServiceGetFavoritesByUserIdResult)
	success, err := handler.(favorite.UserService).GetFavoritesByUserId(ctx, realArg.GetFavoritesByUserIdReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetFavoritesByUserIdArgs() interface{} {
	return favorite.NewUserServiceGetFavoritesByUserIdArgs()
}

func newUserServiceGetFavoritesByUserIdResult() interface{} {
	return favorite.NewUserServiceGetFavoritesByUserIdResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) IsFavorite(ctx context.Context, isFavoriteReq *favorite.IsFavoriteReq) (r *favorite.IsFavoriteResp, err error) {
	var _args favorite.UserServiceIsFavoriteArgs
	_args.IsFavoriteReq = isFavoriteReq
	var _result favorite.UserServiceIsFavoriteResult
	if err = p.c.Call(ctx, "IsFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Like(ctx context.Context, likeReq *favorite.LikeReq) (r *favorite.LikeResp, err error) {
	var _args favorite.UserServiceLikeArgs
	_args.LikeReq = likeReq
	var _result favorite.UserServiceLikeResult
	if err = p.c.Call(ctx, "Like", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnLike(ctx context.Context, unLikeReq *favorite.UnLikeReq) (r *favorite.UnLikeResp, err error) {
	var _args favorite.UserServiceUnLikeArgs
	_args.UnLikeReq = unLikeReq
	var _result favorite.UserServiceUnLikeResult
	if err = p.c.Call(ctx, "UnLike", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoritesByUserId(ctx context.Context, getFavoritesByUserIdReq *favorite.GetFavoritesByUserIdReq) (r *favorite.GetFavoritesByUserIdResp, err error) {
	var _args favorite.UserServiceGetFavoritesByUserIdArgs
	_args.GetFavoritesByUserIdReq = getFavoritesByUserIdReq
	var _result favorite.UserServiceGetFavoritesByUserIdResult
	if err = p.c.Call(ctx, "GetFavoritesByUserId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
