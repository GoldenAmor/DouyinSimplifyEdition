// Code generated by Kitex v0.3.2. DO NOT EDIT.

package favoriteservice

import (
	"context"
	"dousheng/kitex_gen/favorite"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteServiceServiceInfo
}

var favoriteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoriteService"
	handlerType := (*favorite.FavoriteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"IsFavorite":           kitex.NewMethodInfo(isFavoriteHandler, newFavoriteServiceIsFavoriteArgs, newFavoriteServiceIsFavoriteResult, false),
		"Like":                 kitex.NewMethodInfo(likeHandler, newFavoriteServiceLikeArgs, newFavoriteServiceLikeResult, false),
		"UnLike":               kitex.NewMethodInfo(unLikeHandler, newFavoriteServiceUnLikeArgs, newFavoriteServiceUnLikeResult, false),
		"GetFavoritesByUserId": kitex.NewMethodInfo(getFavoritesByUserIdHandler, newFavoriteServiceGetFavoritesByUserIdArgs, newFavoriteServiceGetFavoritesByUserIdResult, false),
		"CountFavorite":        kitex.NewMethodInfo(countFavoriteHandler, newFavoriteServiceCountFavoriteArgs, newFavoriteServiceCountFavoriteResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "favorite",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func isFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceIsFavoriteArgs)
	realResult := result.(*favorite.FavoriteServiceIsFavoriteResult)
	success, err := handler.(favorite.FavoriteService).IsFavorite(ctx, realArg.IsFavoriteReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceIsFavoriteArgs() interface{} {
	return favorite.NewFavoriteServiceIsFavoriteArgs()
}

func newFavoriteServiceIsFavoriteResult() interface{} {
	return favorite.NewFavoriteServiceIsFavoriteResult()
}

func likeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceLikeArgs)
	realResult := result.(*favorite.FavoriteServiceLikeResult)
	success, err := handler.(favorite.FavoriteService).Like(ctx, realArg.LikeReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceLikeArgs() interface{} {
	return favorite.NewFavoriteServiceLikeArgs()
}

func newFavoriteServiceLikeResult() interface{} {
	return favorite.NewFavoriteServiceLikeResult()
}

func unLikeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceUnLikeArgs)
	realResult := result.(*favorite.FavoriteServiceUnLikeResult)
	success, err := handler.(favorite.FavoriteService).UnLike(ctx, realArg.UnLikeReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceUnLikeArgs() interface{} {
	return favorite.NewFavoriteServiceUnLikeArgs()
}

func newFavoriteServiceUnLikeResult() interface{} {
	return favorite.NewFavoriteServiceUnLikeResult()
}

func getFavoritesByUserIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceGetFavoritesByUserIdArgs)
	realResult := result.(*favorite.FavoriteServiceGetFavoritesByUserIdResult)
	success, err := handler.(favorite.FavoriteService).GetFavoritesByUserId(ctx, realArg.GetFavoritesByUserIdReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceGetFavoritesByUserIdArgs() interface{} {
	return favorite.NewFavoriteServiceGetFavoritesByUserIdArgs()
}

func newFavoriteServiceGetFavoritesByUserIdResult() interface{} {
	return favorite.NewFavoriteServiceGetFavoritesByUserIdResult()
}

func countFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceCountFavoriteArgs)
	realResult := result.(*favorite.FavoriteServiceCountFavoriteResult)
	success, err := handler.(favorite.FavoriteService).CountFavorite(ctx, realArg.CountFavoriteReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceCountFavoriteArgs() interface{} {
	return favorite.NewFavoriteServiceCountFavoriteArgs()
}

func newFavoriteServiceCountFavoriteResult() interface{} {
	return favorite.NewFavoriteServiceCountFavoriteResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) IsFavorite(ctx context.Context, isFavoriteReq *favorite.IsFavoriteReq) (r *favorite.IsFavoriteResp, err error) {
	var _args favorite.FavoriteServiceIsFavoriteArgs
	_args.IsFavoriteReq = isFavoriteReq
	var _result favorite.FavoriteServiceIsFavoriteResult
	if err = p.c.Call(ctx, "IsFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Like(ctx context.Context, likeReq *favorite.LikeReq) (r *favorite.LikeResp, err error) {
	var _args favorite.FavoriteServiceLikeArgs
	_args.LikeReq = likeReq
	var _result favorite.FavoriteServiceLikeResult
	if err = p.c.Call(ctx, "Like", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnLike(ctx context.Context, unLikeReq *favorite.UnLikeReq) (r *favorite.UnLikeResp, err error) {
	var _args favorite.FavoriteServiceUnLikeArgs
	_args.UnLikeReq = unLikeReq
	var _result favorite.FavoriteServiceUnLikeResult
	if err = p.c.Call(ctx, "UnLike", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoritesByUserId(ctx context.Context, getFavoritesByUserIdReq *favorite.GetFavoritesByUserIdReq) (r *favorite.GetFavoritesByUserIdResp, err error) {
	var _args favorite.FavoriteServiceGetFavoritesByUserIdArgs
	_args.GetFavoritesByUserIdReq = getFavoritesByUserIdReq
	var _result favorite.FavoriteServiceGetFavoritesByUserIdResult
	if err = p.c.Call(ctx, "GetFavoritesByUserId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CountFavorite(ctx context.Context, countFavoriteReq *favorite.CountFavoriteReq) (r *favorite.CountFavoriteResp, err error) {
	var _args favorite.FavoriteServiceCountFavoriteArgs
	_args.CountFavoriteReq = countFavoriteReq
	var _result favorite.FavoriteServiceCountFavoriteResult
	if err = p.c.Call(ctx, "CountFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
