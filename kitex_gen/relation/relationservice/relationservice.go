// Code generated by Kitex v0.3.2. DO NOT EDIT.

package relationservice

import (
	"context"
	"dousheng/kitex_gen/relation"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateRelation": kitex.NewMethodInfo(createRelationHandler, newRelationServiceCreateRelationArgs, newRelationServiceCreateRelationResult, false),
		"DeleteRelation": kitex.NewMethodInfo(deleteRelationHandler, newRelationServiceDeleteRelationArgs, newRelationServiceDeleteRelationResult, false),
		"GetFollowers":   kitex.NewMethodInfo(getFollowersHandler, newRelationServiceGetFollowersArgs, newRelationServiceGetFollowersResult, false),
		"GetFollows":     kitex.NewMethodInfo(getFollowsHandler, newRelationServiceGetFollowsArgs, newRelationServiceGetFollowsResult, false),
		"CountFollowers": kitex.NewMethodInfo(countFollowersHandler, newRelationServiceCountFollowersArgs, newRelationServiceCountFollowersResult, false),
		"CountFollows":   kitex.NewMethodInfo(countFollowsHandler, newRelationServiceCountFollowsArgs, newRelationServiceCountFollowsResult, false),
		"IsFollow":       kitex.NewMethodInfo(isFollowHandler, newRelationServiceIsFollowArgs, newRelationServiceIsFollowResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func createRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceCreateRelationArgs)
	realResult := result.(*relation.RelationServiceCreateRelationResult)
	success, err := handler.(relation.RelationService).CreateRelation(ctx, realArg.CreateRelationReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceCreateRelationArgs() interface{} {
	return relation.NewRelationServiceCreateRelationArgs()
}

func newRelationServiceCreateRelationResult() interface{} {
	return relation.NewRelationServiceCreateRelationResult()
}

func deleteRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceDeleteRelationArgs)
	realResult := result.(*relation.RelationServiceDeleteRelationResult)
	success, err := handler.(relation.RelationService).DeleteRelation(ctx, realArg.DeleteRelationReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceDeleteRelationArgs() interface{} {
	return relation.NewRelationServiceDeleteRelationArgs()
}

func newRelationServiceDeleteRelationResult() interface{} {
	return relation.NewRelationServiceDeleteRelationResult()
}

func getFollowersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceGetFollowersArgs)
	realResult := result.(*relation.RelationServiceGetFollowersResult)
	success, err := handler.(relation.RelationService).GetFollowers(ctx, realArg.GetFollowersReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceGetFollowersArgs() interface{} {
	return relation.NewRelationServiceGetFollowersArgs()
}

func newRelationServiceGetFollowersResult() interface{} {
	return relation.NewRelationServiceGetFollowersResult()
}

func getFollowsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceGetFollowsArgs)
	realResult := result.(*relation.RelationServiceGetFollowsResult)
	success, err := handler.(relation.RelationService).GetFollows(ctx, realArg.GetFollowsReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceGetFollowsArgs() interface{} {
	return relation.NewRelationServiceGetFollowsArgs()
}

func newRelationServiceGetFollowsResult() interface{} {
	return relation.NewRelationServiceGetFollowsResult()
}

func countFollowersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceCountFollowersArgs)
	realResult := result.(*relation.RelationServiceCountFollowersResult)
	success, err := handler.(relation.RelationService).CountFollowers(ctx, realArg.CountFollowersReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceCountFollowersArgs() interface{} {
	return relation.NewRelationServiceCountFollowersArgs()
}

func newRelationServiceCountFollowersResult() interface{} {
	return relation.NewRelationServiceCountFollowersResult()
}

func countFollowsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceCountFollowsArgs)
	realResult := result.(*relation.RelationServiceCountFollowsResult)
	success, err := handler.(relation.RelationService).CountFollows(ctx, realArg.CountFollowsReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceCountFollowsArgs() interface{} {
	return relation.NewRelationServiceCountFollowsArgs()
}

func newRelationServiceCountFollowsResult() interface{} {
	return relation.NewRelationServiceCountFollowsResult()
}

func isFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceIsFollowArgs)
	realResult := result.(*relation.RelationServiceIsFollowResult)
	success, err := handler.(relation.RelationService).IsFollow(ctx, realArg.IsFollowReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceIsFollowArgs() interface{} {
	return relation.NewRelationServiceIsFollowArgs()
}

func newRelationServiceIsFollowResult() interface{} {
	return relation.NewRelationServiceIsFollowResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateRelation(ctx context.Context, createRelationReq *relation.CreateRelationReq) (r *relation.CreateRelationResp, err error) {
	var _args relation.RelationServiceCreateRelationArgs
	_args.CreateRelationReq = createRelationReq
	var _result relation.RelationServiceCreateRelationResult
	if err = p.c.Call(ctx, "CreateRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteRelation(ctx context.Context, deleteRelationReq *relation.DeleteRelationReq) (r *relation.DeleteRelationResp, err error) {
	var _args relation.RelationServiceDeleteRelationArgs
	_args.DeleteRelationReq = deleteRelationReq
	var _result relation.RelationServiceDeleteRelationResult
	if err = p.c.Call(ctx, "DeleteRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowers(ctx context.Context, getFollowersReq *relation.GetFollowersReq) (r *relation.GetFollowersResp, err error) {
	var _args relation.RelationServiceGetFollowersArgs
	_args.GetFollowersReq = getFollowersReq
	var _result relation.RelationServiceGetFollowersResult
	if err = p.c.Call(ctx, "GetFollowers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollows(ctx context.Context, getFollowsReq *relation.GetFollowsReq) (r *relation.GetFollowsResp, err error) {
	var _args relation.RelationServiceGetFollowsArgs
	_args.GetFollowsReq = getFollowsReq
	var _result relation.RelationServiceGetFollowsResult
	if err = p.c.Call(ctx, "GetFollows", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CountFollowers(ctx context.Context, countFollowersReq *relation.CountFollowersReq) (r *relation.CountFollowersResp, err error) {
	var _args relation.RelationServiceCountFollowersArgs
	_args.CountFollowersReq = countFollowersReq
	var _result relation.RelationServiceCountFollowersResult
	if err = p.c.Call(ctx, "CountFollowers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CountFollows(ctx context.Context, countFollowsReq *relation.CountFollowsReq) (r *relation.CountFollowsResp, err error) {
	var _args relation.RelationServiceCountFollowsArgs
	_args.CountFollowsReq = countFollowsReq
	var _result relation.RelationServiceCountFollowsResult
	if err = p.c.Call(ctx, "CountFollows", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsFollow(ctx context.Context, isFollowReq *relation.IsFollowReq) (r *relation.IsFollowResp, err error) {
	var _args relation.RelationServiceIsFollowArgs
	_args.IsFollowReq = isFollowReq
	var _result relation.RelationServiceIsFollowResult
	if err = p.c.Call(ctx, "IsFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
