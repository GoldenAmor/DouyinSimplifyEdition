// Code generated by Kitex v0.3.2. DO NOT EDIT.

package videoservice

import (
	"context"
	"dousheng/kitex_gen/video"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateVideo(ctx context.Context, createVideoReq *video.CreateVideoReq, callOptions ...callopt.Option) (r *video.CreateVideoResp, err error)
	GetPublishList(ctx context.Context, getPublishListReq *video.GetPublishListReq, callOptions ...callopt.Option) (r *video.GetPublishListResp, err error)
	GetVideos(ctx context.Context, getVideosReq *video.GetVideosReq, callOptions ...callopt.Option) (r *video.GetVideosResp, err error)
	GetVideoById(ctx context.Context, getVideoByIdReq *video.GetVideoByIdReq, callOptions ...callopt.Option) (r *video.GetVideoByIdResp, err error)
	Publish(ctx context.Context, publishReq *video.PublishReq, callOptions ...callopt.Option) (r *video.PublishResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) CreateVideo(ctx context.Context, createVideoReq *video.CreateVideoReq, callOptions ...callopt.Option) (r *video.CreateVideoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateVideo(ctx, createVideoReq)
}

func (p *kVideoServiceClient) GetPublishList(ctx context.Context, getPublishListReq *video.GetPublishListReq, callOptions ...callopt.Option) (r *video.GetPublishListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPublishList(ctx, getPublishListReq)
}

func (p *kVideoServiceClient) GetVideos(ctx context.Context, getVideosReq *video.GetVideosReq, callOptions ...callopt.Option) (r *video.GetVideosResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideos(ctx, getVideosReq)
}

func (p *kVideoServiceClient) GetVideoById(ctx context.Context, getVideoByIdReq *video.GetVideoByIdReq, callOptions ...callopt.Option) (r *video.GetVideoByIdResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoById(ctx, getVideoByIdReq)
}

func (p *kVideoServiceClient) Publish(ctx context.Context, publishReq *video.PublishReq, callOptions ...callopt.Option) (r *video.PublishResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Publish(ctx, publishReq)
}
