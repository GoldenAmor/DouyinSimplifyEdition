// Code generated by Kitex v0.3.2. DO NOT EDIT.

package videoservice

import (
	"context"
	"dousheng/kitex_gen/video"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateVideo":    kitex.NewMethodInfo(createVideoHandler, newVideoServiceCreateVideoArgs, newVideoServiceCreateVideoResult, false),
		"GetPublishList": kitex.NewMethodInfo(getPublishListHandler, newVideoServiceGetPublishListArgs, newVideoServiceGetPublishListResult, false),
		"GetVideos":      kitex.NewMethodInfo(getVideosHandler, newVideoServiceGetVideosArgs, newVideoServiceGetVideosResult, false),
		"GetVideoById":   kitex.NewMethodInfo(getVideoByIdHandler, newVideoServiceGetVideoByIdArgs, newVideoServiceGetVideoByIdResult, false),
		"Publish":        kitex.NewMethodInfo(publishHandler, newVideoServicePublishArgs, newVideoServicePublishResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func createVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceCreateVideoArgs)
	realResult := result.(*video.VideoServiceCreateVideoResult)
	success, err := handler.(video.VideoService).CreateVideo(ctx, realArg.CreateVideoReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceCreateVideoArgs() interface{} {
	return video.NewVideoServiceCreateVideoArgs()
}

func newVideoServiceCreateVideoResult() interface{} {
	return video.NewVideoServiceCreateVideoResult()
}

func getPublishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetPublishListArgs)
	realResult := result.(*video.VideoServiceGetPublishListResult)
	success, err := handler.(video.VideoService).GetPublishList(ctx, realArg.GetPublishListReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetPublishListArgs() interface{} {
	return video.NewVideoServiceGetPublishListArgs()
}

func newVideoServiceGetPublishListResult() interface{} {
	return video.NewVideoServiceGetPublishListResult()
}

func getVideosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetVideosArgs)
	realResult := result.(*video.VideoServiceGetVideosResult)
	success, err := handler.(video.VideoService).GetVideos(ctx, realArg.GetVideosReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideosArgs() interface{} {
	return video.NewVideoServiceGetVideosArgs()
}

func newVideoServiceGetVideosResult() interface{} {
	return video.NewVideoServiceGetVideosResult()
}

func getVideoByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetVideoByIdArgs)
	realResult := result.(*video.VideoServiceGetVideoByIdResult)
	success, err := handler.(video.VideoService).GetVideoById(ctx, realArg.GetVideoByIdReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideoByIdArgs() interface{} {
	return video.NewVideoServiceGetVideoByIdArgs()
}

func newVideoServiceGetVideoByIdResult() interface{} {
	return video.NewVideoServiceGetVideoByIdResult()
}

func publishHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePublishArgs)
	realResult := result.(*video.VideoServicePublishResult)
	success, err := handler.(video.VideoService).Publish(ctx, realArg.PublishReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishArgs() interface{} {
	return video.NewVideoServicePublishArgs()
}

func newVideoServicePublishResult() interface{} {
	return video.NewVideoServicePublishResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateVideo(ctx context.Context, createVideoReq *video.CreateVideoReq) (r *video.CreateVideoResp, err error) {
	var _args video.VideoServiceCreateVideoArgs
	_args.CreateVideoReq = createVideoReq
	var _result video.VideoServiceCreateVideoResult
	if err = p.c.Call(ctx, "CreateVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPublishList(ctx context.Context, getPublishListReq *video.GetPublishListReq) (r *video.GetPublishListResp, err error) {
	var _args video.VideoServiceGetPublishListArgs
	_args.GetPublishListReq = getPublishListReq
	var _result video.VideoServiceGetPublishListResult
	if err = p.c.Call(ctx, "GetPublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideos(ctx context.Context, getVideosReq *video.GetVideosReq) (r *video.GetVideosResp, err error) {
	var _args video.VideoServiceGetVideosArgs
	_args.GetVideosReq = getVideosReq
	var _result video.VideoServiceGetVideosResult
	if err = p.c.Call(ctx, "GetVideos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoById(ctx context.Context, getVideoByIdReq *video.GetVideoByIdReq) (r *video.GetVideoByIdResp, err error) {
	var _args video.VideoServiceGetVideoByIdArgs
	_args.GetVideoByIdReq = getVideoByIdReq
	var _result video.VideoServiceGetVideoByIdResult
	if err = p.c.Call(ctx, "GetVideoById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Publish(ctx context.Context, publishReq *video.PublishReq) (r *video.PublishResp, err error) {
	var _args video.VideoServicePublishArgs
	_args.PublishReq = publishReq
	var _result video.VideoServicePublishResult
	if err = p.c.Call(ctx, "Publish", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
